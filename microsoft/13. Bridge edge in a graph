class Solution
{
	public:
    //Function to find if the given edge is a bridge in graph.
    void bfs(vector<int> adj[], vector<bool> &visited, int s){
        queue<int>q;
        q.push(s);
        visited[s] = true;
        while(!q.empty()){
            int x = q.front();
            q.pop();
            for(auto it : adj[x]){
                if(visited[it] == false){
                    visited[it] = true;
                    q.push(it);
                }
            }
        }
    }
    
    int cntComp(int v, vector<int> adj[]){
        vector<bool> visited(v , false);
        int cnt = 0;
        for(int i = 0; i < v;i++){
            if(visited[i] == false){
                bfs(adj,visited,i);
                cnt++;
            }
        }
        return cnt;
    }
    
    int isBridge(int V, vector<int> adj[], int c, int d) 
    {
        // Code here
        int comp_ = cntComp(V,adj);
        vector<int>temp;
        for(auto it : adj[c]){
            if(it != d){
                temp.push_back(it);
            }
        }
        adj[c] = temp;
        temp.clear();
        for(auto it : adj[d]){
            if(it != c){
                temp.push_back(it);
            }
        }
        adj[d] = temp;
        int comp = cntComp(V,adj);
        if(comp > comp_)return 1;
        else return 0;
        
    }
};
