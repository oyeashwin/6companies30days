class Solution
{
    public:
    int bfs(vector<vector<int>>& grid,vector<vector<bool>> &visited,int i,int j){
        int n = grid.size();
        int m = grid[0].size();
        queue<pair<int,int>>q;
        q.push({i,j});
        int res = 0;
        visited[i][j] = true;
        while(!q.empty()){
            pair<int,int>p = q.front();
            res++;
            q.pop();
            i = p.first, j = p.second;
            if(i != 0){
                if(grid[i-1][j] == 1 && visited[i-1][j] == false){
                    q.push({i-1,j});
                    visited[i-1][j] = true;
                }
                if(j != 0){
                   if(grid[i-1][j-1] == 1 && visited[i-1][j-1] == false){
                        q.push({i-1,j-1});
                        visited[i-1][j-1] = true;
                    } 
                }
                if(j != m-1){
                    if(grid[i-1][j+1] == 1 && visited[i-1][j+1] == false){
                        q.push({i-1,j+1});
                        visited[i-1][j+1] = true;
                    }
                }
            }
            if(i != n-1){
                if(grid[i+1][j] == 1 && visited[i+1][j] == false){
                    q.push({i+1,j});
                    visited[i+1][j] = true;
                }
                if(j != 0){
                    if(grid[i+1][j-1] == 1 && visited[i+1][j-1] == false){
                        q.push({i+1,j-1});
                        visited[i+1][j-1] = true;
                    }
                }
                if(j != m-1){
                    if(grid[i+1][j+1] == 1 && visited[i+1][j+1] == false){
                        q.push({i+1,j+1});
                        visited[i+1][j+1] = true;
                    }
                }
            }
            if(j != 0){
                if(grid[i][j-1] == 1 && visited[i][j-1] == false){
                    q.push({i,j-1});
                    visited[i][j-1] = true;
                }
            }
            if(j != m-1){
                if(grid[i][j+1] == 1 && visited[i][j+1] == false){
                    q.push({i,j+1});
                    visited[i][j+1] = true;
                }
            }
        }
        return res;
    }
    int findMaxArea(vector<vector<int>>& grid) {
        // Code here
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<bool>>visited(n , vector<bool>(m , false));
        int cnt = INT_MIN; 
        for(int i = 0; i < n;i++){
            for(int j = 0; j < m;j++){
                if(grid[i][j] == 1 && visited[i][j] == false){
                    cnt = max(cnt,bfs(grid,visited,i,j));
                }
            }
        }
        return cnt;
    }
    
};
