// This Problem is same as the 3rd problem which I solved using max heap and as this same problem ,here I solved this using deque instead of heap


class Solution
{
  public:
    //Function to find maximum of each subarray of size k.
    vector <int> max_of_subarrays(int *arr, int n, int k)
    {
        // your code here
        vector<int> res;
        deque<int>dq;
        for(int i = 0; i < k;i++){
            if(dq.empty())dq.push_back(i);
            else{
                while(!dq.empty() && arr[dq.back()] < arr[i])dq.pop_back();
                dq.push_back(i);
            }
        }
        res.push_back(arr[dq.front()]);
        int start = 1;
        for(int i = k; i < n;i++){
            if(dq.front() < start)dq.pop_front();
            if(dq.empty())dq.push_back(i);
            else{
                while(!dq.empty() && arr[dq.back()] < arr[i])dq.pop_back();
                dq.push_back(i);
            }
            start++;
            res.push_back(arr[dq.front()]);
        }
        return res;
    }
};
