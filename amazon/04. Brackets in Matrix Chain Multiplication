class Solution{
public:

    int t[27][27];
    int brack[27][27];
    
    string createBracket(int l,int r,char &curr){
        string res = "";
        if(r - l == 1){
            res += curr;
            curr++;
            return res;
        }
        if(r - l == 2){
            res += "(";
            res += curr;
            curr++;
            res += curr;
            curr++;
            res += ")";
            return res;
        }
        res += "(";
        res += createBracket(l,brack[l][r],curr);
        res += createBracket(brack[l][r],r,curr);
        res += ")";
        return res;
    }
    
    int mcm(int arr[],int l,int r){
        if(t[l][r] != -1)return t[l][r];
        if(r-l == 1)return t[l][r] = 0;
        if(r-l == 2)return t[l][r] = arr[l]*arr[l+1]*arr[r];
        int res = INT_MAX;
        for(int p = l+1; p < r;p++){
            int curr = mcm(arr,l,p) + mcm(arr,p,r) + arr[l]*arr[p]*arr[r]; 
            if(res > curr){
                res = curr;
                brack[l][r] = p;
            } 
        }
        
        return t[l][r] = res;
    }
    
    string matrixChainOrder(int p[], int n){
        // code here
        memset(t,-1,sizeof(t));
        memset(brack,-1,sizeof(brack));
        mcm(p,0,n-1);
        char start = 'A';
        return createBracket(0,n-1,start);
    }
