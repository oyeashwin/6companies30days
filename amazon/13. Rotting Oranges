class Solution {
public:
    bool isSafe(int x,int y,int m,int n){
        if((x >= 0 && x <= m-1) && (y >= 0 && y <= n-1))return true;
        else return false;
    }
    int orangesRotting(vector<vector<int>>& grid) {
        int res = 0;
        queue<pair<int,int>> ro;
        int m = grid.size();
        int n = grid[0].size();
        for(int i = 0 ; i < m;i++){
            for(int j = 0; j < n;j++){
                if(grid[i][j] == 2){
                    ro.push({i,j});
                }
            }
        }
        ro.push({-1,-1});
        while(ro.size() > 1){
            pair<int,int> curr = ro.front();
            ro.pop();
            if(curr.first == -1){
                res++;
                ro.push({-1,-1});
            }
            else{
                int x = curr.first,y = curr.second;
                if(isSafe(x-1,y,m,n) && grid[x-1][y] == 1){
                    grid[x-1][y] = 2;
                    ro.push({x-1,y});
                }
                if(isSafe(x+1,y,m,n) && grid[x+1][y] == 1){
                    grid[x+1][y] = 2;
                    ro.push({x+1,y});
                }
                if(isSafe(x,y-1,m,n) && grid[x][y-1] == 1){
                    grid[x][y-1] = 2;
                    ro.push({x,y-1});
                }
                if(isSafe(x,y+1,m,n) && grid[x][y+1] == 1){
                    grid[x][y+1] = 2;
                    ro.push({x,y+1});
                }
            }
        }
        for(int i = 0 ; i < m;i++){
            for(int j = 0; j < n;j++){
                if(grid[i][j] == 1){
                    return -1;
                }
            }
        }
        return res;
    }
};
